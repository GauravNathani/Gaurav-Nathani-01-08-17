/*This Script will take the list of URLs and results output with URL, StatusCode, Description. Response Length and the time taken fields in a HTML format report.*/

node('master') {

	stage('Init') {
   powershell '''write-host "Website Monitoring.." '''

}

	stage('Test URL') {
powershell '''## The URI list to test

URLList.txt << read-host '%1'

$URLListFile = "c:/users/user/jenkins/workspace/URL-Check/URLList.txt"  
$URLList = Get-Content $URLListFile -ErrorAction SilentlyContinue 
  $Result = @() 
   
   
  Foreach($Uri in $URLList) { 
  $time = try{ 
  $request = $null 
   ## Request the URI, and measure how long the response took. 
  $result1 = Measure-Command { $request = Invoke-WebRequest -Uri $uri } 
  $result1.TotalMilliseconds 
  }  
  catch 
  { 
   <# If the request generated an exception (i.e.: 500 server 
   error or 404 not found), we can pull the status code from the 
   Exception.Response property #> 
   $request = $_.Exception.Response 
   $time = -1 
  }   
  $result += [PSCustomObject] @{ 
  Time = Get-Date; 
  Uri = $uri; 
  StatusCode = [int] $request.StatusCode; 
  StatusDescription = $request.StatusDescription; 
  ResponseLength = $request.RawContentLength; 
  TimeTaken =  $time;  
  } 
 
} 
    #Prepare email body in HTML format 
if($result -ne $null) 
{ 
    $Outputreport = "<HTML><TITLE>Website Availability Report</TITLE><BODY background-color:peachpuff><font color =""#99000"" face=""Microsoft Tai le""><H2> Website Availability Report </H2></font><Table border=1 cellpadding=0 cellspacing=0><TR bgcolor=gray align=center><TD><B>StatusDescription</B></TD><TD><B>Status_Code</B></TD><TD><B>url</B></TD><TD><B>TimeTaken</B></TD</TR>" 
    Foreach($Entry in $Result) 
    { 
        if($Entry.StatusCode -ne "200") 
        { 
            $Outputreport += "<TR bgcolor=red>" 
        } 
        else 
        { 
            $Outputreport += "<TR>" 
        } 
        $Outputreport += "<TD align=center>$($Entry.StatusDescription)</TD><TD align=center>$($Entry.StatusCode)</TD><TD align=center>$($Entry.uri)</TD><TD align=center>$($Entry.timetaken)</TD></TR>" 
    } 
    $Outputreport += "</Table></BODY></HTML>" 
} 
 
$Outputreport | out-file C:\Users\scmbuild\Desktop\Test.htm 
Invoke-Expression C:\Users\scmbuild\Desktop\Test.htm   '''

}

	stage('SonarQube Analysis') {

sh 'echo "Sonar Scan Initiated.."'
        
        /*def sonarHome = tool 'sonarscanner-3.0.3'
        sh 'echo ${sonarHome}'
        tool name: 'sonarscanner-3.0.3', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        withSonarQubeEnv {
            sh '''export JAVA_HOME=c:/user/downloads/java/hotspot/8/current
            export PATH=${JAVA_HOME}/bin:${PATH}
            c:/users/tools/sonar-scanner-3.0.3.778-linux/bin/sonar-scanner -e -Dsonar.host.url=http://localhost:9000/sonar -Dsonar.projectName=URL -Dsonar.projectVersion=1.0.0.1-SNAPSHOT -Dsonar.jacoco.reportPath=target/test-results/coverage/jacoco/jacoco.exec -Dsonar.profile=test -Dsonar.projectKey=test.url -Dsonar.java.binaries=target -Dsonar.sources=src -Dsonar.projectBaseDir=c:/users/user/jenkins/workspace/URL-Check'''
        }*/
        //sh 'c:/users/user/jenkins/tools/sonar-scanner-3.0.3.778-linux/bin/'
    }

	stage('Code Coverage Analysis') {
      jacoco(execPattern: '**/*.exec')   
    }
}